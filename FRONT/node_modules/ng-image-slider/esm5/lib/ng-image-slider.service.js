/**
 * @fileoverview added by tsickle
 * Generated from: lib/ng-image-slider.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
/** @type {?} */
import * as ɵngcc0 from '@angular/core';
var DESC = 'DESC';
/** @type {?} */
var ASC = 'ASC';
var NgImageSliderService = /** @class */ (function () {
    function NgImageSliderService() {
    }
    /**
     * @param {?} str
     * @return {?}
     */
    NgImageSliderService.prototype.isBase64 = /**
     * @param {?} str
     * @return {?}
     */
    function (str) {
        /** @type {?} */
        var base64regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;
        return base64regex.test(str);
    };
    /**
     * @param {?} str
     * @return {?}
     */
    NgImageSliderService.prototype.base64FileExtension = /**
     * @param {?} str
     * @return {?}
     */
    function (str) {
        return str.substring("data:image/".length, str.indexOf(";base64"));
    };
    /**
     * @param {?=} arr
     * @param {?=} orderType
     * @return {?}
     */
    NgImageSliderService.prototype.orderArray = /**
     * @param {?=} arr
     * @param {?=} orderType
     * @return {?}
     */
    function (arr, orderType) {
        if (arr === void 0) { arr = []; }
        if (orderType === void 0) { orderType = ASC; }
        if ((arr === null || arr === void 0 ? void 0 : arr.length) && orderType) {
            return arr.sort((/**
             * @param {?} ob1
             * @param {?} ob2
             * @return {?}
             */
            function (ob1, ob2) {
                if (ob1['order'] === null || !ob1['order']) {
                    return 1;
                }
                else if (ob2['order'] === null || !ob2['order']) {
                    return -1;
                }
                else if (ob1['order'] > ob2['order']) {
                    if (orderType === DESC) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
                else if (ob1['order'] < ob2['order']) {
                    if (orderType === DESC) {
                        return 1;
                    }
                    else {
                        return -1;
                    }
                }
            }));
        }
        return arr;
    };
    /** @nocollapse */
    NgImageSliderService.ctorParameters = function () { return []; };
NgImageSliderService.ɵfac = function NgImageSliderService_Factory(t) { return new (t || NgImageSliderService)(); };
NgImageSliderService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NgImageSliderService, factory: function (t) { return NgImageSliderService.ɵfac(t); } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgImageSliderService, [{
        type: Injectable
    }], function () { return []; }, null); })();
    return NgImageSliderService;
}());
export { NgImageSliderService };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctaW1hZ2Utc2xpZGVyLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIm5nLWltYWdlLXNsaWRlci9saWIvbmctaW1hZ2Utc2xpZGVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDOztBQUFrQixJQUFaLElBQUksR0FBRyxNQUFNO0FBQ2xCO0FBRUEsSUFGRyxHQUFHLEdBQUcsS0FBSztBQUVmO0FBR00sSUFBRjtBQUVZLElBRkksQ0FBQztBQUVyQjtBQUFTO0FBQ0c7QUFBb0I7QUFBUyxJQURyQyx1Q0FBUTtBQUNaO0FBQXVCO0FBQW9CO0FBQVMsSUFEaEQsVUFBUyxHQUFHO0FBQ2Y7QUFBMEIsWUFBZixXQUFXLEdBQUcsa0VBQWtFO0FBQzNGLFFBQU8sT0FBTyxXQUFXLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBRXJDLElBQUksQ0FBQztBQUVKO0FBQVM7QUFDUjtBQUFvQjtBQUFTLElBRDNCLGtEQUFtQjtBQUN2QjtBQUF1QjtBQUFvQjtBQUFTLElBRGhELFVBQW9CLEdBQUc7QUFDMUIsUUFBTyxPQUFPLEdBQUcsQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7QUFDMUUsSUFBRyxDQUFDO0FBRUo7QUFBUztBQUF3QjtBQUNkO0FBQ3BCO0FBQVMsSUFGTCx5Q0FBVTtBQUFRO0FBQ3BCO0FBQThCO0FBQ3BCO0FBQVMsSUFGakIsVUFBVyxHQUFRLEVBQUUsU0FBZTtBQUN2QyxRQURjLG9CQUFBLEVBQUEsUUFBUTtBQUFLLFFBQUgsMEJBQUEsRUFBQSxlQUFlO0FBQ3ZDLFFBQU8sSUFBSSxDQUFBLEdBQUcsYUFBSCxHQUFHLHVCQUFILEdBQUcsQ0FBRSxNQUFNLEtBQUksU0FBUyxFQUFFO0FBQ3JDLFlBQVcsT0FBTyxHQUFHLENBQUMsSUFBSTtBQUFPO0FBQ2I7QUFBK0I7QUFDbEM7QUFDYixZQUh1QixVQUFDLEdBQUcsRUFBRSxHQUFHO0FBQUssZ0JBQzFCLElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRTtBQUMzRCxvQkFBbUIsT0FBTyxDQUFDLENBQUM7QUFDNUIsaUJBQWdCO0FBQ2hCLHFCQUFvQixJQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUU7QUFDaEUsb0JBQW1CLE9BQU8sQ0FBQyxDQUFDLENBQUM7QUFDN0IsaUJBQWdCO0FBQ2hCLHFCQUFvQixJQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUU7QUFDckQsb0JBQW1CLElBQUksU0FBUyxLQUFLLElBQUksRUFBRTtBQUMzQyx3QkFBdUIsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUNqQyxxQkFBb0I7QUFBRSx5QkFBSTtBQUMxQix3QkFBdUIsT0FBTyxDQUFDLENBQUM7QUFDaEMscUJBQW9CO0FBQ3BCLGlCQUFnQjtBQUNoQixxQkFBb0IsSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFO0FBQ3JELG9CQUNtQixJQUFJLFNBQVMsS0FBSyxJQUFJLEVBQUU7QUFDM0Msd0JBQXVCLE9BQU8sQ0FBQyxDQUFDO0FBQ2hDLHFCQUFvQjtBQUFFLHlCQUFJO0FBQzFCLHdCQUF1QixPQUFPLENBQUMsQ0FBQyxDQUFDO0FBQ2pDLHFCQUFvQjtBQUNwQixpQkFBZ0I7QUFDaEIsWUFBVyxDQUFDLEVBQUMsQ0FBQztBQUNkLFNBQVE7QUFDUixRQUFPLE9BQU8sR0FBRyxDQUFDO0FBQ2xCLElBQUcsQ0FBQyxDQXpDRTtBQUFFO2lDQURSLFVBQVUsM0NBQ3NCOzs7OztnREFLWDtBQUFFLElBcUN4QiwyQkFBQztBQUNDLENBREQsQUEzQ0QsSUEyQ0M7O0FBaERBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFHQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBMUNBLEFBQUEsQUEyQ0EsQUFBQSxBQUFBLEFBM0NBLEFBMkNBLEFBMUNBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmNvbnN0IERFU0MgPSAnREVTQycsXG4gICAgQVNDID0gJ0FTQyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBOZ0ltYWdlU2xpZGVyU2VydmljZSB7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHsgfVxuXG4gICAgaXNCYXNlNjQoc3RyKSB7XG4gICAgICAgIHZhciBiYXNlNjRyZWdleCA9IC9eKFswLTlhLXpBLVorL117NH0pKigoWzAtOWEtekEtWisvXXsyfT09KXwoWzAtOWEtekEtWisvXXszfT0pKT8kLztcbiAgICAgICAgcmV0dXJuIGJhc2U2NHJlZ2V4LnRlc3Qoc3RyKTtcblxuICAgIH1cblxuICAgIGJhc2U2NEZpbGVFeHRlbnNpb24oc3RyKSB7XG4gICAgICAgIHJldHVybiBzdHIuc3Vic3RyaW5nKFwiZGF0YTppbWFnZS9cIi5sZW5ndGgsIHN0ci5pbmRleE9mKFwiO2Jhc2U2NFwiKSk7XG4gICAgfVxuXG4gICAgb3JkZXJBcnJheShhcnIgPSBbXSwgb3JkZXJUeXBlID0gQVNDKSB7XG4gICAgICAgIGlmIChhcnI/Lmxlbmd0aCAmJiBvcmRlclR5cGUpIHtcbiAgICAgICAgICAgIHJldHVybiBhcnIuc29ydCgob2IxLCBvYjIpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAob2IxWydvcmRlciddID09PSBudWxsIHx8ICFvYjFbJ29yZGVyJ10pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKG9iMlsnb3JkZXInXSA9PT0gbnVsbCB8fCAhb2IyWydvcmRlciddKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAob2IxWydvcmRlciddID4gb2IyWydvcmRlciddKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcmRlclR5cGUgPT09IERFU0MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKG9iMVsnb3JkZXInXSA8IG9iMlsnb3JkZXInXSkge1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9yZGVyVHlwZSA9PT0gREVTQykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXJyO1xuICAgIH1cbn1cbiJdfQ==