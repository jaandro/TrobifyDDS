/**
 * @fileoverview added by tsickle
 * Generated from: lib/ng-image-slider.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
/** @type {?} */
import * as ɵngcc0 from '@angular/core';
const DESC = 'DESC';
/** @type {?} */
const ASC = 'ASC';
export class NgImageSliderService {
    constructor() { }
    /**
     * @param {?} str
     * @return {?}
     */
    isBase64(str) {
        /** @type {?} */
        var base64regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;
        return base64regex.test(str);
    }
    /**
     * @param {?} str
     * @return {?}
     */
    base64FileExtension(str) {
        return str.substring("data:image/".length, str.indexOf(";base64"));
    }
    /**
     * @param {?=} arr
     * @param {?=} orderType
     * @return {?}
     */
    orderArray(arr = [], orderType = ASC) {
        if ((arr === null || arr === void 0 ? void 0 : arr.length) && orderType) {
            return arr.sort((/**
             * @param {?} ob1
             * @param {?} ob2
             * @return {?}
             */
            (ob1, ob2) => {
                if (ob1['order'] === null || !ob1['order']) {
                    return 1;
                }
                else if (ob2['order'] === null || !ob2['order']) {
                    return -1;
                }
                else if (ob1['order'] > ob2['order']) {
                    if (orderType === DESC) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
                else if (ob1['order'] < ob2['order']) {
                    if (orderType === DESC) {
                        return 1;
                    }
                    else {
                        return -1;
                    }
                }
            }));
        }
        return arr;
    }
}
NgImageSliderService.ɵfac = function NgImageSliderService_Factory(t) { return new (t || NgImageSliderService)(); };
NgImageSliderService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NgImageSliderService, factory: NgImageSliderService.ɵfac });
/** @nocollapse */
NgImageSliderService.ctorParameters = () => [];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgImageSliderService, [{
        type: Injectable
    }], function () { return []; }, null); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctaW1hZ2Utc2xpZGVyLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIm5nLWltYWdlLXNsaWRlci9saWIvbmctaW1hZ2Utc2xpZGVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDOztBQUFrQixNQUFaLElBQUksR0FBRyxNQUFNO0FBQ2xCO0FBRUEsTUFGRyxHQUFHLEdBQUcsS0FBSztBQUdmLE1BQU0sT0FBTyxvQkFBb0I7QUFFakMsSUFBSSxnQkFBZ0IsQ0FBQztBQUVyQjtBQUFTO0FBQ0c7QUFBb0I7QUFBUyxJQURyQyxRQUFRLENBQUMsR0FBRztBQUNmO0FBQTBCLFlBQWYsV0FBVyxHQUFHLGtFQUFrRTtBQUMzRixRQUFPLE9BQU8sV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUVyQyxJQUFJLENBQUM7QUFFTDtBQUFTO0FBQ1I7QUFBb0I7QUFBUyxJQUQxQixtQkFBbUIsQ0FBQyxHQUFHO0FBQzFCLFFBQU8sT0FBTyxHQUFHLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO0FBQzFFLElBQUcsQ0FBQztBQUVMO0FBQVM7QUFBd0I7QUFDZDtBQUFvQjtBQUMvQixJQUZKLFVBQVUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxFQUFFLFNBQVMsR0FBRyxHQUFHO0FBQ3ZDLFFBQU8sSUFBSSxDQUFBLEdBQUcsYUFBSCxHQUFHLHVCQUFILEdBQUcsQ0FBRSxNQUFNLEtBQUksU0FBUyxFQUFFO0FBQ3JDLFlBQVcsT0FBTyxHQUFHLENBQUMsSUFBSTtBQUFPO0FBQ2I7QUFBK0I7QUFDbEM7QUFDYixZQUh1QixDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRTtBQUN4QyxnQkFBZSxJQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUU7QUFDM0Qsb0JBQW1CLE9BQU8sQ0FBQyxDQUFDO0FBQzVCLGlCQUFnQjtBQUNoQixxQkFBb0IsSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFO0FBQ2hFLG9CQUFtQixPQUFPLENBQUMsQ0FBQyxDQUFDO0FBQzdCLGlCQUFnQjtBQUNoQixxQkFBb0IsSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFO0FBQ3JELG9CQUFtQixJQUFJLFNBQVMsS0FBSyxJQUFJLEVBQUU7QUFDM0Msd0JBQXVCLE9BQU8sQ0FBQyxDQUFDLENBQUM7QUFDakMscUJBQW9CO0FBQUUseUJBQUk7QUFDMUIsd0JBQXVCLE9BQU8sQ0FBQyxDQUFDO0FBQ2hDLHFCQUFvQjtBQUNwQixpQkFBZ0I7QUFDaEIscUJBQW9CLElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRTtBQUNyRCxvQkFDbUIsSUFBSSxTQUFTLEtBQUssSUFBSSxFQUFFO0FBQzNDLHdCQUF1QixPQUFPLENBQUMsQ0FBQztBQUNoQyxxQkFBb0I7QUFBRSx5QkFBSTtBQUMxQix3QkFBdUIsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUNqQyxxQkFBb0I7QUFDcEIsaUJBQWdCO0FBQ2hCLFlBQVcsQ0FBQyxFQUFDLENBQUM7QUFDZCxTQUFRO0FBQ1IsUUFBTyxPQUFPLEdBQUcsQ0FBQztBQUNsQixJQUFHLENBQUM7QUFDSjtrREEzQ0EsVUFBVTs0SEFDUjtBQUFFO0FBQW9COzs7O0FBTkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQTFDQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5jb25zdCBERVNDID0gJ0RFU0MnLFxuICAgIEFTQyA9ICdBU0MnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTmdJbWFnZVNsaWRlclNlcnZpY2Uge1xuXG4gICAgY29uc3RydWN0b3IoKSB7IH1cblxuICAgIGlzQmFzZTY0KHN0cikge1xuICAgICAgICB2YXIgYmFzZTY0cmVnZXggPSAvXihbMC05YS16QS1aKy9dezR9KSooKFswLTlhLXpBLVorL117Mn09PSl8KFswLTlhLXpBLVorL117M309KSk/JC87XG4gICAgICAgIHJldHVybiBiYXNlNjRyZWdleC50ZXN0KHN0cik7XG5cbiAgICB9XG5cbiAgICBiYXNlNjRGaWxlRXh0ZW5zaW9uKHN0cikge1xuICAgICAgICByZXR1cm4gc3RyLnN1YnN0cmluZyhcImRhdGE6aW1hZ2UvXCIubGVuZ3RoLCBzdHIuaW5kZXhPZihcIjtiYXNlNjRcIikpO1xuICAgIH1cblxuICAgIG9yZGVyQXJyYXkoYXJyID0gW10sIG9yZGVyVHlwZSA9IEFTQykge1xuICAgICAgICBpZiAoYXJyPy5sZW5ndGggJiYgb3JkZXJUeXBlKSB7XG4gICAgICAgICAgICByZXR1cm4gYXJyLnNvcnQoKG9iMSwgb2IyKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKG9iMVsnb3JkZXInXSA9PT0gbnVsbCB8fCAhb2IxWydvcmRlciddKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChvYjJbJ29yZGVyJ10gPT09IG51bGwgfHwgIW9iMlsnb3JkZXInXSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKG9iMVsnb3JkZXInXSA+IG9iMlsnb3JkZXInXSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAob3JkZXJUeXBlID09PSBERVNDKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChvYjFbJ29yZGVyJ10gPCBvYjJbJ29yZGVyJ10pIHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcmRlclR5cGUgPT09IERFU0MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFycjtcbiAgICB9XG59XG4iXX0=