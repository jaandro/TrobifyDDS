/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef } from '@angular/core';
import { isBrowser } from './cloudinary.service';
import * as ɵngcc0 from '@angular/core';
export class LazyLoadDirective {
    /**
     * @param {?} el
     */
    constructor(el) {
        this.el = el;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (isBrowser()) {
            if (!this.isNativeLazyLoadSupported() && this.isLazyLoadSupported()) {
                this.lazyLoad();
            }
            else {
                this.loadImage();
            }
        }
    }
    /**
     * @return {?}
     */
    loadImage() {
        /** @type {?} */
        const nativeElement = this.el.nativeElement;
        /** @type {?} */
        const image = nativeElement.children[0];
        image.setAttribute('src', image.dataset.src);
    }
    /**
     * @return {?}
     */
    isLazyLoadSupported() {
        return window && 'IntersectionObserver' in window;
    }
    /**
     * @return {?}
     */
    isNativeLazyLoadSupported() {
        return 'loading' in HTMLImageElement.prototype; // check loading property is defined on image or iframe
    }
    /**
     * @return {?}
     */
    lazyLoad() {
        /** @type {?} */
        const options = {
            rootMargin: `0px 0px -50% 0px`,
        };
        /** @type {?} */
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    this.loadImage();
                    observer.unobserve(entry.target);
                }
            }, options);
        });
        observer.observe(this.el.nativeElement);
    }
}
LazyLoadDirective.ɵfac = function LazyLoadDirective_Factory(t) { return new (t || LazyLoadDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
LazyLoadDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: LazyLoadDirective, selectors: [["cl-image", "loading", "lazy"]] });
/** @nocollapse */
LazyLoadDirective.ctorParameters = () => [
    { type: ElementRef }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LazyLoadDirective, [{
        type: Directive,
        args: [{
                selector: 'cl-image[loading=lazy]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();
if (false) {
    /**
     * @type {?}
     * @private
     */
    LazyLoadDirective.prototype.el;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xvdWRpbmFyeS1sYXp5LWxvYWQuZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyJAY2xvdWRpbmFyeS9hbmd1bGFyLTUueC9saWIvY2xvdWRpbmFyeS1sYXp5LWxvYWQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQWdCLFNBQVMsRUFBRSxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDbkUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHNCQUFzQixDQUFDOztBQUtqRCxNQUFNLE9BQU8saUJBQWlCO0FBQUk7QUFBUztBQUVyQztBQUFTLElBQWIsWUFBb0IsRUFBYztBQUNwQyxRQURzQixPQUFFLEdBQUYsRUFBRSxDQUFZO0FBQUUsSUFBQyxDQUFDO0FBRXhDO0FBQVM7QUFDRjtBQUFTLElBRGQsZUFBZTtBQUNoQixRQUFHLElBQUksU0FBUyxFQUFFLEVBQUU7QUFDcEIsWUFBSyxJQUFJLENBQUMsSUFBSSxDQUFDLHlCQUF5QixFQUFFLElBQUksSUFBSSxDQUFDLG1CQUFtQixFQUFFLEVBQUU7QUFDMUUsZ0JBQU8sSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQ3ZCLGFBQU07QUFBRSxpQkFBSTtBQUNaLGdCQUFPLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztBQUN4QixhQUFNO0FBQ04sU0FBSTtBQUNKLElBQUMsQ0FBQztBQUVIO0FBQVM7QUFDSTtBQUFTLElBRHBCLFNBQVM7QUFDVjtBQUEwQixjQUFqQixhQUFhLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhO0FBQzlDO0FBQTBCLGNBQWpCLEtBQUssR0FBRyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztBQUMxQyxRQUFHLEtBQUssQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDaEQsSUFBQyxDQUFDO0FBRUg7QUFBUztBQUNOO0FBQVMsSUFEVixtQkFBbUI7QUFDcEIsUUFBRyxPQUFPLE1BQU0sSUFBSSxzQkFBc0IsSUFBSSxNQUFNLENBQUM7QUFDckQsSUFBQyxDQUFDO0FBRUg7QUFBUztBQUFvQjtBQUN2QixJQURKLHlCQUF5QjtBQUMxQixRQUFHLE9BQU8sU0FBUyxJQUFJLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxDQUFDLHVEQUF1RDtBQUMxRyxJQUFDLENBQUM7QUFFSDtBQUFTO0FBQ0s7QUFDYixJQUZDLFFBQVE7QUFDVDtBQUNJLGNBREssT0FBTyxHQUFHO0FBQ25CLFlBQUssVUFBVSxFQUFFLGtCQUFrQjtBQUFHLFNBQ2xDO0FBQ0o7QUFBMEIsY0FBakIsUUFBUSxHQUFHLElBQUksb0JBQW9CLENBQ3pDLENBQUMsT0FBTyxFQUFFLEVBQUU7QUFDZixZQUFLLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7QUFDN0IsZ0JBQVMsSUFBSSxLQUFLLENBQUMsY0FBYyxFQUFFO0FBQ25DLG9CQUFXLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztBQUM1QixvQkFBVyxRQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUM1QyxpQkFBVTtBQUNWLFlBQU8sQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ25CLFFBQUssQ0FBQyxDQUFDO0FBQ1AsUUFBRyxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDM0MsSUFBQyxDQUFDO0FBQ0Y7K0NBOUNBLFNBQVMsU0FBQyxtQkFDVCxRQUFRLEVBQUUsd0JBQXdCLGVBQ25DOzZIQUNLO0FBQUU7QUFBb0I7QUFFZixZQVJxQixVQUFVO0FBQUk7Ozs7OzsyRUFBRTtBQUFFO0FBQWM7QUFDM0Q7QUFBa0I7QUFBaUI7QUFFMUMsSUFLYywrQkFBc0I7O0FBUkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBS0EsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUE3Q0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUxBLEFBQUEsQUFRQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtBZnRlclZpZXdJbml0LCBEaXJlY3RpdmUsIEVsZW1lbnRSZWZ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgaXNCcm93c2VyIH0gZnJvbSAnLi9jbG91ZGluYXJ5LnNlcnZpY2UnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdjbC1pbWFnZVtsb2FkaW5nPWxhenldJ1xufSlcbmV4cG9ydCBjbGFzcyBMYXp5TG9hZERpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWYpIHt9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIGlmIChpc0Jyb3dzZXIoKSkge1xuICAgICAgaWYgKCF0aGlzLmlzTmF0aXZlTGF6eUxvYWRTdXBwb3J0ZWQoKSAmJiB0aGlzLmlzTGF6eUxvYWRTdXBwb3J0ZWQoKSkge1xuICAgICAgICB0aGlzLmxhenlMb2FkKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmxvYWRJbWFnZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGxvYWRJbWFnZSgpIHtcbiAgICBjb25zdCBuYXRpdmVFbGVtZW50ID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50O1xuICAgIGNvbnN0IGltYWdlID0gbmF0aXZlRWxlbWVudC5jaGlsZHJlblswXTtcbiAgICBpbWFnZS5zZXRBdHRyaWJ1dGUoJ3NyYycsIGltYWdlLmRhdGFzZXQuc3JjKTtcbiAgfVxuXG4gIGlzTGF6eUxvYWRTdXBwb3J0ZWQoKSB7XG4gICAgcmV0dXJuIHdpbmRvdyAmJiAnSW50ZXJzZWN0aW9uT2JzZXJ2ZXInIGluIHdpbmRvdztcbiAgfVxuXG4gIGlzTmF0aXZlTGF6eUxvYWRTdXBwb3J0ZWQoKSB7XG4gICAgcmV0dXJuICdsb2FkaW5nJyBpbiBIVE1MSW1hZ2VFbGVtZW50LnByb3RvdHlwZTsgLy8gY2hlY2sgbG9hZGluZyBwcm9wZXJ0eSBpcyBkZWZpbmVkIG9uIGltYWdlIG9yIGlmcmFtZVxuICB9XG5cbiAgbGF6eUxvYWQoKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgIHJvb3RNYXJnaW46IGAwcHggMHB4IC01MCUgMHB4YCwgLy8gTWFyZ2luIGFyb3VuZCB0aGUgcm9vdFxuICAgIH07XG4gICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoXG4gICAgKGVudHJpZXMpID0+IHtcbiAgICAgIGVudHJpZXMuZm9yRWFjaChlbnRyeSA9PiB7XG4gICAgICAgICAgaWYgKGVudHJ5LmlzSW50ZXJzZWN0aW5nKSB7XG4gICAgICAgICAgICB0aGlzLmxvYWRJbWFnZSgpO1xuICAgICAgICAgICAgb2JzZXJ2ZXIudW5vYnNlcnZlKGVudHJ5LnRhcmdldCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCBvcHRpb25zKTtcbiAgICAgIH0pO1xuICAgIG9ic2VydmVyLm9ic2VydmUodGhpcy5lbC5uYXRpdmVFbGVtZW50KTtcbiAgfVxufVxuIl19