/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
'use strict';
/* App Module */
import { NgModule, InjectionToken } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Cloudinary } from './cloudinary.service';
import { CloudinaryImage } from './cloudinary-image.component';
import { CloudinaryVideo } from './cloudinary-video.component';
import { CloudinaryTransformationDirective } from './cloudinary-transformation.directive';
import { CloudinaryImageSourceDirective } from './cloudinary-image-source.directive';
import { CloudinaryBackgroundImageDirective } from './cloudinary-background-image.directive';
import { LazyLoadDirective } from './cloudinary-lazy-load.directive';
import { CloudinaryPlaceHolder } from './cloudinary-placeholder.component';
// Export for lib consumers
export { CloudinaryImage } from './cloudinary-image.component';
export { CloudinaryVideo } from './cloudinary-video.component';
export { CloudinaryTransformationDirective } from './cloudinary-transformation.directive';
export { CloudinaryImageSourceDirective } from './cloudinary-image-source.directive';
export { CloudinaryBackgroundImageDirective } from './cloudinary-background-image.directive';
export { LazyLoadDirective } from './cloudinary-lazy-load.directive';
export { CloudinaryPlaceHolder } from './cloudinary-placeholder.component';
export { Cloudinary, provideCloudinary } from './cloudinary.service';
/** @type {?} */
export const CLOUDINARY_LIB = new InjectionToken('CLOUDINARY_LIB');
/** @type {?} */
export const CLOUDINARY_CONFIGURATION = new InjectionToken('CLOUDINARY_CONFIGURATION');
// Export this function to Angular's AOT to work
/**
 * @param {?} cloudinaryJsLib
 * @param {?} configuration
 * @return {?}
 */
export function createCloudinary(cloudinaryJsLib, configuration) {
    return new Cloudinary(cloudinaryJsLib, configuration);
}
;
export class CloudinaryModule {
    /**
     * @param {?} cloudinaryJsLib
     * @param {?} cloudinaryConfiguration
     * @return {?}
     */
    static forRoot(cloudinaryJsLib, cloudinaryConfiguration) {
        return {
            ngModule: CloudinaryModule,
            providers: [
                { provide: CLOUDINARY_LIB, useValue: cloudinaryJsLib },
                { provide: CLOUDINARY_CONFIGURATION, useValue: cloudinaryConfiguration },
                {
                    provide: Cloudinary,
                    useFactory: createCloudinary,
                    deps: [CLOUDINARY_LIB, CLOUDINARY_CONFIGURATION]
                }
            ]
        };
    }
}
CloudinaryModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: CloudinaryModule });
CloudinaryModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function CloudinaryModule_Factory(t) { return new (t || CloudinaryModule)(); }, imports: [[
            CommonModule,
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CloudinaryModule, { declarations: function () { return [CloudinaryImageSourceDirective,
        CloudinaryBackgroundImageDirective,
        CloudinaryImage,
        CloudinaryVideo,
        CloudinaryTransformationDirective,
        LazyLoadDirective,
        CloudinaryPlaceHolder]; }, imports: function () { return [CommonModule]; }, exports: function () { return [CloudinaryImageSourceDirective,
        CloudinaryBackgroundImageDirective,
        CloudinaryImage,
        CloudinaryVideo,
        CloudinaryTransformationDirective,
        LazyLoadDirective,
        CloudinaryPlaceHolder]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CloudinaryModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                ],
                declarations: [
                    CloudinaryImageSourceDirective,
                    CloudinaryBackgroundImageDirective,
                    CloudinaryImage,
                    CloudinaryVideo,
                    CloudinaryTransformationDirective,
                    LazyLoadDirective,
                    CloudinaryPlaceHolder,
                ],
                exports: [
                    CloudinaryImageSourceDirective,
                    CloudinaryBackgroundImageDirective,
                    CloudinaryImage,
                    CloudinaryVideo,
                    CloudinaryTransformationDirective,
                    LazyLoadDirective,
                    CloudinaryPlaceHolder
                ]
            }]
    }], null, null); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,