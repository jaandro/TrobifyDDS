/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, Input, ContentChildren, QueryList, PLATFORM_ID, Inject, EventEmitter, Output } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { Cloudinary } from './cloudinary.service';
import { CloudinaryTransformationDirective } from './cloudinary-transformation.directive';
// See also video reference - http://cloudinary.com/documentation/video_manipulation_and_delivery#video_transformations_reference
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './cloudinary.service';
export class CloudinaryVideo {
    /**
     * @param {?} el
     * @param {?} cloudinary
     * @param {?} platformId
     */
    constructor(el, cloudinary, platformId) {
        this.el = el;
        this.cloudinary = cloudinary;
        this.platformId = platformId;
        this.play = new EventEmitter();
        this.loadstart = new EventEmitter();
        this.playing = new EventEmitter();
        this.error = new EventEmitter();
        this.ended = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (typeof MutationObserver !== 'undefined') {
            // Create an observer instance
            this.observer = new MutationObserver(() => {
                this.loadVideo(this.publicId);
            });
            // Observe changes to attributes or child transformations to re-render the image
            /** @type {?} */
            const config = { attributes: true, childList: true };
            // pass in the target node, as well as the observer options
            this.observer.observe(this.el.nativeElement, config);
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        // Listen to changes on the data-bound property 'publicId'.
        // Update component unless this is the first value assigned.
        if (changes.publicId && !changes.publicId.isFirstChange()) {
            this.loadVideo(changes.publicId.currentValue);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.observer && this.observer.disconnect) {
            this.observer.disconnect();
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (!this.publicId) {
            throw new Error('You must set the public id of the video to load, e.g. <cl-video public-id={{video.public_id}}...></cl-video>');
        }
        this.loadVideo(this.publicId);
    }
    /**
     * @param {?} publicId
     * @return {?}
     */
    loadVideo(publicId) {
        // https://github.com/angular/universal#universal-gotchas
        if (isPlatformBrowser(this.platformId)) {
            /** @type {?} */
            const nativeElement = this.el.nativeElement;
            /** @type {?} */
            const video = nativeElement.children[0];
            /** @type {?} */
            const options = this.cloudinary.toCloudinaryAttributes(nativeElement.attributes, this.transformations);
            /** @type {?} */
            const videoTag = this.cloudinary.videoTag(publicId, options);
            // Replace template with the custom video tag created by Cloudinary
            this.appendSourceElements(video, videoTag.content());
            // Add attributes
            this.setElementAttributes(video, videoTag.attributes());
        }
    }
    /**
     * @param {?} element
     * @param {?} attributesLiteral
     * @return {?}
     */
    setElementAttributes(element, attributesLiteral) {
        Object.keys(attributesLiteral).forEach(attrName => {
            element.setAttribute(attrName, attributesLiteral[attrName]);
        });
    }
    /**
     * @param {?} element
     * @param {?} html
     * @return {?}
     */
    appendSourceElements(element, html) {
        /** @type {?} */
        const fragment = document.createDocumentFragment();
        element.innerHTML = html;
        while (element.childNodes[0]) {
            fragment.appendChild(element.childNodes[0]);
        }
        element.appendChild(fragment);
    }
    /**
     * @return {?}
     */
    emitPlayEvent() {
        this.play.emit();
    }
    /**
     * @return {?}
     */
    emitLoadstartEvent() {
        this.loadstart.emit();
    }
    /**
     * @return {?}
     */
    emitPlayingEvent() {
        this.playing.emit();
    }
    /**
     * @return {?}
     */
    emitErrorEvent() {
        this.error.emit();
    }
    /**
     * @return {?}
     */
    emitEndedEvent() {
        this.ended.emit();
    }
}
CloudinaryVideo.ɵfac = function CloudinaryVideo_Factory(t) { return new (t || CloudinaryVideo)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Cloudinary), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID)); };
CloudinaryVideo.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CloudinaryVideo, selectors: [["cl-video"]], contentQueries: function CloudinaryVideo_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, CloudinaryTransformationDirective, 0);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.transformations = _t);
    } }, inputs: { publicId: ["public-id", "publicId"] }, outputs: { play: "play", loadstart: "loadstart", playing: "playing", error: "error", ended: "ended" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 1, vars: 0, consts: [[3, "play", "loadstart", "playing", "error", "ended"]], template: function CloudinaryVideo_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "video", 0);
        ɵngcc0.ɵɵlistener("play", function CloudinaryVideo_Template_video_play_0_listener() { return ctx.emitPlayEvent(); })("loadstart", function CloudinaryVideo_Template_video_loadstart_0_listener() { return ctx.emitLoadstartEvent(); })("playing", function CloudinaryVideo_Template_video_playing_0_listener() { return ctx.emitPlayingEvent(); })("error", function CloudinaryVideo_Template_video_error_0_listener() { return ctx.emitErrorEvent; })("ended", function CloudinaryVideo_Template_video_ended_0_listener() { return ctx.emitEndedEvent; });
        ɵngcc0.ɵɵelementEnd();
    } }, encapsulation: 2 });
/** @nocollapse */
CloudinaryVideo.ctorParameters = () => [
    { type: ElementRef },
    { type: Cloudinary },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
CloudinaryVideo.propDecorators = {
    publicId: [{ type: Input, args: ['public-id',] }],
    play: [{ type: Output }],
    loadstart: [{ type: Output }],
    playing: [{ type: Output }],
    error: [{ type: Output }],
    ended: [{ type: Output }],
    transformations: [{ type: ContentChildren, args: [CloudinaryTransformationDirective,] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CloudinaryVideo, [{
        type: Component,
        args: [{
                selector: 'cl-video',
                template: '<video (play)="emitPlayEvent()" (loadstart)="emitLoadstartEvent()" (playing)="emitPlayingEvent()" (error)="emitErrorEvent" (ended)="emitEndedEvent"></video>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Cloudinary }, { type: Object, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }]; }, { play: [{
            type: Output
        }], loadstart: [{
            type: Output
        }], playing: [{
            type: Output
        }], error: [{
            type: Output
        }], ended: [{
            type: Output
        }], publicId: [{
            type: Input,
            args: ['public-id']
        }], transformations: [{
            type: ContentChildren,
            args: [CloudinaryTransformationDirective]
        }] }); })();
if (false) {
    /** @type {?} */
    CloudinaryVideo.prototype.publicId;
    /** @type {?} */
    CloudinaryVideo.prototype.play;
    /** @type {?} */
    CloudinaryVideo.prototype.loadstart;
    /** @type {?} */
    CloudinaryVideo.prototype.playing;
    /** @type {?} */
    CloudinaryVideo.prototype.error;
    /** @type {?} */
    CloudinaryVideo.prototype.ended;
    /** @type {?} */
    CloudinaryVideo.prototype.transformations;
    /** @type {?} */
    CloudinaryVideo.prototype.observer;
    /**
     * @type {?}
     * @private
     */
    CloudinaryVideo.prototype.el;
    /**
     * @type {?}
     * @private
     */
    CloudinaryVideo.prototype.cloudinary;
    /**
     * @type {?}
     * @private
     */
    CloudinaryVideo.prototype.platformId;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,