/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, HostBinding, Input, ElementRef, Renderer2, } from '@angular/core';
import { Cloudinary } from './cloudinary.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './cloudinary.service';
export class CloudinaryPlaceHolder {
    /**
     * @param {?} cloudinary
     * @param {?} renderer
     * @param {?} el
     */
    constructor(cloudinary, renderer, el) {
        this.cloudinary = cloudinary;
        this.renderer = renderer;
        this.el = el;
        this.options = {};
    }
    /**
     * @param {?} width
     * @return {?}
     */
    setWidth(width) {
        this.itemWidth = width;
    }
    /**
     * @param {?} height
     * @return {?}
     */
    setHeight(height) {
        this.itemHeight = height;
    }
    /**
     * @param {?} id
     * @return {?}
     */
    setPublicId(id) {
        this.publicId = id;
    }
    /**
     * @return {?}
     */
    ngAfterContentChecked() {
        /** @type {?} */
        const imageTag = this.cloudinary.imageTag(this.publicId, this.options);
        this.setElementAttributes(this.el.nativeElement.children[0], imageTag.attributes());
        this.placeholderImg = this.getPlaceholderImage();
    }
    /**
     * @return {?}
     */
    getPlaceholderImage() {
        if (this.type === 'predominant-color' && this.itemHeight && this.itemWidth) {
            return this.cloudinary.url(this.publicId, Object.assign({ placeholder: 'predominant-color-pixel' || true }, this.options));
        }
        else {
            return this.cloudinary.url(this.publicId, Object.assign({ placeholder: this.type || true }, this.options));
        }
    }
    /**
     * @param {?} element
     * @param {?} attributesLiteral
     * @return {?}
     */
    setElementAttributes(element, attributesLiteral) {
        Object.keys(attributesLiteral).forEach(attrName => {
            if (attrName !== 'src' && attrName !== 'style') {
                this.renderer.setAttribute(element, attrName, attributesLiteral[attrName]);
            }
        });
    }
}
CloudinaryPlaceHolder.ɵfac = function CloudinaryPlaceHolder_Factory(t) { return new (t || CloudinaryPlaceHolder)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Cloudinary), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
CloudinaryPlaceHolder.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CloudinaryPlaceHolder, selectors: [["cl-placeholder"]], hostVars: 5, hostBindings: function CloudinaryPlaceHolder_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("public-id", ctx.publicId);
        ɵngcc0.ɵɵstyleProp("width", ctx.itemWidth)("height", ctx.itemHeight);
    } }, inputs: { type: "type" }, decls: 1, vars: 1, consts: [[3, "src"]], template: function CloudinaryPlaceHolder_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "img", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("src", ctx.placeholderImg, ɵngcc0.ɵɵsanitizeUrl);
    } }, encapsulation: 2 });
/** @nocollapse */
CloudinaryPlaceHolder.ctorParameters = () => [
    { type: Cloudinary },
    { type: Renderer2 },
    { type: ElementRef }
];
CloudinaryPlaceHolder.propDecorators = {
    type: [{ type: Input, args: ['type',] }],
    itemWidth: [{ type: HostBinding, args: ['style.width',] }],
    itemHeight: [{ type: HostBinding, args: ['style.height',] }],
    publicId: [{ type: HostBinding, args: ['attr.public-id',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CloudinaryPlaceHolder, [{
        type: Component,
        args: [{
                selector: 'cl-placeholder',
                template: `<img [src]="this.placeholderImg">`
            }]
    }], function () { return [{ type: ɵngcc1.Cloudinary }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }]; }, { itemWidth: [{
            type: HostBinding,
            args: ['style.width']
        }], itemHeight: [{
            type: HostBinding,
            args: ['style.height']
        }], publicId: [{
            type: HostBinding,
            args: ['attr.public-id']
        }], type: [{
            type: Input,
            args: ['type']
        }] }); })();
if (false) {
    /** @type {?} */
    CloudinaryPlaceHolder.prototype.type;
    /** @type {?} */
    CloudinaryPlaceHolder.prototype.itemWidth;
    /** @type {?} */
    CloudinaryPlaceHolder.prototype.itemHeight;
    /** @type {?} */
    CloudinaryPlaceHolder.prototype.publicId;
    /** @type {?} */
    CloudinaryPlaceHolder.prototype.options;
    /** @type {?} */
    CloudinaryPlaceHolder.prototype.placeholderImg;
    /**
     * @type {?}
     * @private
     */
    CloudinaryPlaceHolder.prototype.cloudinary;
    /**
     * @type {?}
     * @private
     */
    CloudinaryPlaceHolder.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    CloudinaryPlaceHolder.prototype.el;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xvdWRpbmFyeS1wbGFjZWhvbGRlci5jb21wb25lbnQuanMiLCJzb3VyY2VzIjpbIkBjbG91ZGluYXJ5L2FuZ3VsYXItNS54L2xpYi9jbG91ZGluYXJ5LXBsYWNlaG9sZGVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUVMLFNBQVMsRUFDVCxXQUFXLEVBQ1gsS0FBSyxFQUNMLFVBQVUsRUFDVixTQUFTLEdBQ1YsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLHNCQUFzQixDQUFDOzs7QUFRaEQsTUFBTSxPQUFPLHFCQUFxQjtBQUFJO0FBQVM7QUFDdEM7QUFDSDtBQUFzQjtBQUFTLElBT25DLFlBQW9CLFVBQXNCLEVBQVUsUUFBbUIsRUFBVSxFQUFjO0FBQ2pHLFFBRHNCLGVBQVUsR0FBVixVQUFVLENBQVk7QUFBRSxRQUFRLGFBQVEsR0FBUixRQUFRLENBQVc7QUFBRSxRQUFRLE9BQUUsR0FBRixFQUFFLENBQVk7QUFBRSxRQUhqRyxZQUFPLEdBQVcsRUFBRSxDQUFDO0FBQ3RCLElBRW1HLENBQUM7QUFFckc7QUFBUztBQUNLO0FBR2I7QUFBUyxJQUpSLFFBQVEsQ0FBQyxLQUFLO0FBQ2YsUUFBRyxJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztBQUMxQixJQUFDLENBQUM7QUFFSDtBQUFTO0FBQ0k7QUFDVjtBQUVJLElBSkwsU0FBUyxDQUFDLE1BQU07QUFDakIsUUFBRyxJQUFJLENBQUMsVUFBVSxHQUFHLE1BQU0sQ0FBQztBQUM1QixJQUFDLENBQUM7QUFFSDtBQUFTO0FBQ0U7QUFHVDtBQUFTLElBSlQsV0FBVyxDQUFDLEVBQUU7QUFDZixRQUFHLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO0FBQ3RCLElBQUMsQ0FBQztBQUVIO0FBQVM7QUFDUjtBQUFTLElBRFIscUJBQXFCO0FBQ3RCO0FBQTBCLGNBQWpCLFFBQVEsR0FBRyxJQUFJLENBQUMsVUFB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QUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFIQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQWhEQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFQQSxBQUFBLEFBRkEsQUFBQSxBQURBLEFBQUEsQUFZQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUhBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEFmdGVyQ29udGVudENoZWNrZWQsXG4gIENvbXBvbmVudCxcbiAgSG9zdEJpbmRpbmcsXG4gIElucHV0LFxuICBFbGVtZW50UmVmLFxuICBSZW5kZXJlcjIsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtDbG91ZGluYXJ5fSBmcm9tICcuL2Nsb3VkaW5hcnkuc2VydmljZSc7XG5pbXBvcnQgeyBTREtBbmFseXRpY3NDb25zdGFudHMgfSAgZnJvbSAnLi9TREtBbmFseXRpY3NDb25zdGFudHMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjbC1wbGFjZWhvbGRlcicsXG4gIHRlbXBsYXRlOiBgPGltZyBbc3JjXT1cInRoaXMucGxhY2Vob2xkZXJJbWdcIj5gXG4gICxcbn0pXG5leHBvcnQgY2xhc3MgQ2xvdWRpbmFyeVBsYWNlSG9sZGVyIGltcGxlbWVudHMgQWZ0ZXJDb250ZW50Q2hlY2tlZCB7XG4gIEBJbnB1dCgndHlwZScpIHR5cGU6IHN0cmluZztcbiAgQEhvc3RCaW5kaW5nKCdzdHlsZS53aWR0aCcpIGl0ZW1XaWR0aDtcbiAgQEhvc3RCaW5kaW5nKCdzdHlsZS5oZWlnaHQnKSBpdGVtSGVpZ2h0O1xuICBASG9zdEJpbmRpbmcoJ2F0dHIucHVibGljLWlkJykgcHVibGljSWQ7XG5cbiAgb3B0aW9uczogb2JqZWN0ID0ge307XG4gIHBsYWNlaG9sZGVySW1nOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjbG91ZGluYXJ5OiBDbG91ZGluYXJ5LCBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIsIHByaXZhdGUgZWw6IEVsZW1lbnRSZWYpIHt9XG5cbiAgc2V0V2lkdGgod2lkdGgpIHtcbiAgICB0aGlzLml0ZW1XaWR0aCA9IHdpZHRoO1xuICB9XG5cbiAgc2V0SGVpZ2h0KGhlaWdodCkge1xuICAgIHRoaXMuaXRlbUhlaWdodCA9IGhlaWdodDtcbiAgfVxuXG4gIHNldFB1YmxpY0lkKGlkKSB7XG4gICAgdGhpcy5wdWJsaWNJZCA9IGlkO1xuICB9XG5cbiAgbmdBZnRlckNvbnRlbnRDaGVja2VkKCkge1xuICAgIGNvbnN0IGltYWdlVGFnID0gdGhpcy5jbG91ZGluYXJ5LmltYWdlVGFnKHRoaXMucHVibGljSWQsIHRoaXMub3B0aW9ucyk7XG4gICAgdGhpcy5zZXRFbGVtZW50QXR0cmlidXRlcyh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuY2hpbGRyZW5bMF0sIGltYWdlVGFnLmF0dHJpYnV0ZXMoKSk7XG4gICAgdGhpcy5wbGFjZWhvbGRlckltZyA9IHRoaXMuZ2V0UGxhY2Vob2xkZXJJbWFnZSgpO1xuICB9XG5cbiAgZ2V0UGxhY2Vob2xkZXJJbWFnZSgpIHtcbiAgICBpZiAodGhpcy50eXBlID09PSAncHJlZG9taW5hbnQtY29sb3InICYmIHRoaXMuaXRlbUhlaWdodCAmJiB0aGlzLml0ZW1XaWR0aCkge1xuICAgICAgcmV0dXJuIHRoaXMuY2xvdWRpbmFyeS51cmwodGhpcy5wdWJsaWNJZCwge3BsYWNlaG9sZGVyOiAncHJlZG9taW5hbnQtY29sb3ItcGl4ZWwnIHx8IHRydWUsIC4uLnRoaXMub3B0aW9uc30pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5jbG91ZGluYXJ5LnVybCh0aGlzLnB1YmxpY0lkLCB7cGxhY2Vob2xkZXI6IHRoaXMudHlwZSB8fCB0cnVlLCAuLi50aGlzLm9wdGlvbnN9KTtcbiAgICB9XG4gIH1cblxuICBzZXRFbGVtZW50QXR0cmlidXRlcyhlbGVtZW50LCBhdHRyaWJ1dGVzTGl0ZXJhbCkge1xuICAgIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXNMaXRlcmFsKS5mb3JFYWNoKGF0dHJOYW1lID0+IHtcbiAgICAgIGlmIChhdHRyTmFtZSAhPT0gJ3NyYycgJiYgYXR0ck5hbWUgIT09ICdzdHlsZScpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUoZWxlbWVudCwgYXR0ck5hbWUsIGF0dHJpYnV0ZXNMaXRlcmFsW2F0dHJOYW1lXSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==