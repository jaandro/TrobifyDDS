/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
var CloudinaryTransformationDirective = /** @class */ (function () {
    function CloudinaryTransformationDirective(el) {
        this.el = el;
    }
    /**
     * @return {?}
     */
    CloudinaryTransformationDirective.prototype.getAttributes = /**
     * @return {?}
     */
    function () {
        return this.el.nativeElement.attributes;
    };
    /** @nocollapse */
    CloudinaryTransformationDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
CloudinaryTransformationDirective.ɵfac = function CloudinaryTransformationDirective_Factory(t) { return new (t || CloudinaryTransformationDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
CloudinaryTransformationDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CloudinaryTransformationDirective, selectors: [["cl-transformation"]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CloudinaryTransformationDirective, [{
        type: Directive,
        args: [{
                selector: 'cl-transformation'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();
    return CloudinaryTransformationDirective;
}());
export { CloudinaryTransformationDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    CloudinaryTransformationDirective.prototype.el;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xvdWRpbmFyeS10cmFuc2Zvcm1hdGlvbi5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbIkBjbG91ZGluYXJ5L2FuZ3VsYXItNS54L2xpYi9jbG91ZGluYXJ5LXRyYW5zZm9ybWF0aW9uLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBRXREO0FBR3NCLElBRXBCLDJDQUFvQixFQUFjO0FBQ25DLFFBRHFCLE9BQUUsR0FBRixFQUFFLENBQVk7QUFBRSxJQUNwQyxDQUFDO0FBRUg7QUFBUztBQUFvQjtBQUN6QixJQURGLHlEQUFhO0FBQVE7QUFDZDtBQUFTLElBRGhCO0FBQWUsUUFDYixPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQztBQUMzQyxJQUFDLENBQUMsQ0FQTztBQUFFOzhDQUhYLFNBQVMsU0FBQyxoRUFHeUI7UUFGbEMsUUFBUSxFQUFFLGxCQU9RLGdCQVZBLFVBQVU7T0FHQyxQQUhHO2dCQUlqQzs7Ozs7OzsyRUFKMEM7QUFBRSxJQWE3Qyx3Q0FBQztBQUNDLENBREQsQUFYRCxJQVdDO0FBQ0EsU0FUWSxpQ0FBaUM7QUFFN0M7QUFBYztBQUFTO0FBQ3RCO0FBRVk7QUFBUyxJQUhULCtDQUFzQjs7QUFQQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBS0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFWQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBSkEsQUFBQSxBQWFBLEFBQUEsQUFBQSxBQVhBLEFBV0EsQUFSQSxBQUFBLEFBRUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdjbC10cmFuc2Zvcm1hdGlvbidcbn0pXG5leHBvcnQgY2xhc3MgQ2xvdWRpbmFyeVRyYW5zZm9ybWF0aW9uRGlyZWN0aXZlIHtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBFbGVtZW50UmVmKSB7XG4gIH1cblxuICBnZXRBdHRyaWJ1dGVzKCk6IE5hbWVkTm9kZU1hcCB7XG4gICAgcmV0dXJuIHRoaXMuZWwubmF0aXZlRWxlbWVudC5hdHRyaWJ1dGVzO1xuICB9XG59XG4iXX0=