/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ElementRef, EventEmitter, Input, Output, ContentChildren, QueryList, ContentChild, Renderer2, } from '@angular/core';
import { Cloudinary } from './cloudinary.service';
import { CloudinaryTransformationDirective } from './cloudinary-transformation.directive';
import { CloudinaryPlaceHolder } from './cloudinary-placeholder.component';
import { isBrowser } from './cloudinary.service';
import { SDKAnalyticsConstants } from './SDKAnalyticsConstants';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './cloudinary.service';
import * as ɵngcc2 from '@angular/common';

function CloudinaryImage_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵprojection(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵstyleProp("display", ctx_r0.shouldShowPlaceHolder ? "inline" : "none");
} }
var _c0 = ["*"];
var CloudinaryImage = /** @class */ (function () {
    function CloudinaryImage(el, cloudinary, renderer) {
        this.el = el;
        this.cloudinary = cloudinary;
        this.renderer = renderer;
        this.onLoad = new EventEmitter(); // Callback when an image is loaded successfully
        // Callback when an image is loaded successfully
        this.onError = new EventEmitter(); // Callback when an image is loaded with error
        this.shouldShowPlaceHolder = true;
        this.options = {};
    }
    /**
     * @return {?}
     */
    CloudinaryImage.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (isBrowser()) {
            // Create an observer instance
            this.observer = new MutationObserver(function () {
                _this.loadImage();
            });
            // Observe changes to attributes or child transformations to re-render the image
            /** @type {?} */
            var config = { attributes: true, childList: true };
            // pass in the target node, as well as the observer options
            this.observer.observe(this.el.nativeElement, config);
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    CloudinaryImage.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        // Listen to changes on the data-bound property 'publicId'.
        // Update component unless this is the first value assigned.
        if (changes.publicId && !changes.publicId.isFirstChange()) {
            this.loadImage();
        }
    };
    /**
     * @return {?}
     */
    CloudinaryImage.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.observer && this.observer.disconnect) {
            this.observer.disconnect();
        }
    };
    /**
     * @return {?}
     */
    CloudinaryImage.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.loadImage();
    };
    /**
     * @return {?}
     */
    CloudinaryImage.prototype.ngAfterContentChecked = /**
     * @return {?}
     */
    function () {
        if (this.width && this.placeholderComponent) {
            this.placeholderComponent.setWidth(this.width);
        }
        if (this.height && this.placeholderComponent) {
            this.placeholderComponent.setHeight(this.height);
        }
        if (this.placeholderComponent) {
            this.placeholderComponent.setPublicId(this.publicId);
        }
    };
    /**
     * appends opacity and position to cl-img->img when placeholder is displayed
     * removes styling from cl-img->img when placeholder does not display
     */
    /**
     * appends opacity and position to cl-img->img when placeholder is displayed
     * removes styling from cl-img->img when placeholder does not display
     * @return {?}
     */
    CloudinaryImage.prototype.setPlaceHolderStyle = /**
     * appends opacity and position to cl-img->img when placeholder is displayed
     * removes styling from cl-img->img when placeholder does not display
     * @return {?}
     */
    function () {
        if (this.shouldShowPlaceHolder) {
            this.renderer.setStyle(this.el.nativeElement.children[0], 'opacity', '0');
            this.renderer.setStyle(this.el.nativeElement.children[0], 'position', 'absolute');
        }
        else {
            // note this only removes styling from cl-img->img and not cl-img
            this.renderer.removeAttribute(this.el.nativeElement.children[0], 'style');
        }
    };
    /**
     * @return {?}
     */
    CloudinaryImage.prototype.hasLoaded = /**
     * @return {?}
     */
    function () {
        this.shouldShowPlaceHolder = false;
    };
    /**
     * @return {?}
     */
    CloudinaryImage.prototype.loadImage = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // https://github.com/angular/universal#universal-gotchas
        // Fetch the image only for client side rendering by the browser
        if (isBrowser()) {
            if (!this.publicId) {
                throw new Error('You must set the public id of the image to load, e.g. <cl-image public-id={{photo.public_id}}...></cl-image>');
            }
            /** @type {?} */
            var nativeElement = this.el.nativeElement;
            /** @type {?} */
            var image = nativeElement.children[0];
            // Add onload and onerror handlers
            image.onload = function (e) {
                _this.onLoad.emit(e);
            };
            image.onerror = function (e) {
                _this.onError.emit(e);
            };
            this.options = this.cloudinary.toCloudinaryAttributes(nativeElement.attributes, this.transformations);
            if (this.clientHints || (typeof this.clientHints === 'undefined' && this.cloudinary.config().client_hints)) {
                delete this.options['class'];
                delete this.options['data-src'];
                delete this.options['responsive'];
            }
            if (this.cloudinary.config().urlAnalytics) {
                this.options = tslib_1.__assign({}, SDKAnalyticsConstants, this.options);
            }
            if (this.placeholderComponent) {
                this.placeholderHandler(this.options, image);
            }
            if (this.accessibility) {
                this.options['src'] = this.accessibilityModeHandler();
            }
            /** @type {?} */
            var imageTag = this.cloudinary.imageTag(this.publicId, this.options);
            this.setElementAttributes(image, imageTag.attributes());
            if (this.options['responsive']) {
                this.cloudinary.responsive(image, this.options);
            }
        }
    };
    /**
     * @param {?} element
     * @param {?} attributesLiteral
     * @return {?}
     */
    CloudinaryImage.prototype.setElementAttributes = /**
     * @param {?} element
     * @param {?} attributesLiteral
     * @return {?}
     */
    function (element, attributesLiteral) {
        var _this = this;
        Object.keys(attributesLiteral).forEach(function (attrName) {
            /** @type {?} */
            var attr = attrName === 'src' && _this.loading === 'lazy' ? 'data-src' : attrName;
            _this.renderer.setAttribute(element, attr, attributesLiteral[attrName]);
        });
        // Enforcing placeholder style
        if (this.placeholderComponent) {
            this.setPlaceHolderStyle();
        }
    };
    /**
     * Handles placeholder options
     * In case of responsive sets width from resize
     * In case width or height is known takes 10% of original dimension
     */
    /**
     * Handles placeholder options
     * In case of responsive sets width from resize
     * In case width or height is known takes 10% of original dimension
     * @param {?} options
     * @param {?} image
     * @return {?}
     */
    CloudinaryImage.prototype.placeholderHandler = /**
     * Handles placeholder options
     * In case of responsive sets width from resize
     * In case width or height is known takes 10% of original dimension
     * @param {?} options
     * @param {?} image
     * @return {?}
     */
    function (options, image) {
        /** @type {?} */
        var placeholderOptions = tslib_1.__assign({}, options);
        if (placeholderOptions['width']) {
            if (placeholderOptions['width'] === 'auto') {
                placeholderOptions['width'] = image.getAttribute('data-width');
            }
        }
        this.placeholderComponent.options = placeholderOptions;
    };
    /**
     * @return {?}
     */
    CloudinaryImage.prototype.accessibilityModeHandler = /**
     * @return {?}
     */
    function () {
        return this.cloudinary.url(this.publicId, tslib_1.__assign({ accessibility: this.accessibility }, this.options));
    };
    /** @nocollapse */
    CloudinaryImage.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Cloudinary },
        { type: Renderer2 }
    ]; };
    CloudinaryImage.propDecorators = {
        publicId: [{ type: Input, args: ['public-id',] }],
        clientHints: [{ type: Input, args: ['client-hints',] }],
        loading: [{ type: Input, args: ['loading',] }],
        width: [{ type: Input, args: ['width',] }],
        height: [{ type: Input, args: ['height',] }],
        accessibility: [{ type: Input, args: ['accessibility',] }],
        transformations: [{ type: ContentChildren, args: [CloudinaryTransformationDirective,] }],
        placeholderComponent: [{ type: ContentChild, args: [CloudinaryPlaceHolder,] }],
        onLoad: [{ type: Output }],
        onError: [{ type: Output }]
    };
CloudinaryImage.ɵfac = function CloudinaryImage_Factory(t) { return new (t || CloudinaryImage)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Cloudinary), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
CloudinaryImage.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CloudinaryImage, selectors: [["cl-image"]], contentQueries: function CloudinaryImage_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, CloudinaryPlaceHolder, 1);
        ɵngcc0.ɵɵcontentQuery(dirIndex, CloudinaryTransformationDirective, 0);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.placeholderComponent = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.transformations = _t);
    } }, inputs: { publicId: ["public-id", "publicId"], clientHints: ["client-hints", "clientHints"], loading: "loading", width: "width", height: "height", accessibility: "accessibility" }, outputs: { onLoad: "onLoad", onError: "onError" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 2, vars: 1, consts: [[3, "load"], [3, "display", 4, "ngIf"]], template: function CloudinaryImage_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "img", 0);
        ɵngcc0.ɵɵlistener("load", function CloudinaryImage_Template_img_load_0_listener() { return ctx.hasLoaded(); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(1, CloudinaryImage_div_1_Template, 2, 2, "div", 1);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.placeholderComponent && ctx.shouldShowPlaceHolder);
    } }, directives: [ɵngcc2.NgIf], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CloudinaryImage, [{
        type: Component,
        args: [{
                selector: 'cl-image',
                template: "<img (load)=\"hasLoaded()\">\n  <div *ngIf=\"placeholderComponent && shouldShowPlaceHolder\" [style.display]=\"shouldShowPlaceHolder ? 'inline' : 'none'\">\n    <ng-content></ng-content>\n  </div>\n  "
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Cloudinary }, { type: ɵngcc0.Renderer2 }]; }, { onLoad: [{
            type: Output
        }], onError: [{
            type: Output
        }], publicId: [{
            type: Input,
            args: ['public-id']
        }], clientHints: [{
            type: Input,
            args: ['client-hints']
        }], loading: [{
            type: Input,
            args: ['loading']
        }], width: [{
            type: Input,
            args: ['width']
        }], height: [{
            type: Input,
            args: ['height']
        }], accessibility: [{
            type: Input,
            args: ['accessibility']
        }], transformations: [{
            type: ContentChildren,
            args: [CloudinaryTransformationDirective]
        }], placeholderComponent: [{
            type: ContentChild,
            args: [CloudinaryPlaceHolder]
        }] }); })();
    return CloudinaryImage;
}());
export { CloudinaryImage };
if (false) {
    /** @type {?} */
    CloudinaryImage.prototype.publicId;
    /** @type {?} */
    CloudinaryImage.prototype.clientHints;
    /** @type {?} */
    CloudinaryImage.prototype.loading;
    /** @type {?} */
    CloudinaryImage.prototype.width;
    /** @type {?} */
    CloudinaryImage.prototype.height;
    /** @type {?} */
    CloudinaryImage.prototype.accessibility;
    /** @type {?} */
    CloudinaryImage.prototype.transformations;
    /** @type {?} */
    CloudinaryImage.prototype.placeholderComponent;
    /** @type {?} */
    CloudinaryImage.prototype.onLoad;
    /** @type {?} */
    CloudinaryImage.prototype.onError;
    /** @type {?} */
    CloudinaryImage.prototype.observer;
    /** @type {?} */
    CloudinaryImage.prototype.shouldShowPlaceHolder;
    /** @type {?} */
    CloudinaryImage.prototype.options;
    /**
     * @type {?}
     * @private
     */
    CloudinaryImage.prototype.el;
    /**
     * @type {?}
     * @private
     */
    CloudinaryImage.prototype.cloudinary;
    /**
     * @type {?}
     * @private
     */
    CloudinaryImage.prototype.renderer;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,