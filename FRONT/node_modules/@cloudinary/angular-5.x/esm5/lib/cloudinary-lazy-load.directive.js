/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef } from '@angular/core';
import { isBrowser } from './cloudinary.service';
import * as ɵngcc0 from '@angular/core';
var LazyLoadDirective = /** @class */ (function () {
    function LazyLoadDirective(el) {
        this.el = el;
    }
    /**
     * @return {?}
     */
    LazyLoadDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (isBrowser()) {
            if (!this.isNativeLazyLoadSupported() && this.isLazyLoadSupported()) {
                this.lazyLoad();
            }
            else {
                this.loadImage();
            }
        }
    };
    /**
     * @return {?}
     */
    LazyLoadDirective.prototype.loadImage = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var nativeElement = this.el.nativeElement;
        /** @type {?} */
        var image = nativeElement.children[0];
        image.setAttribute('src', image.dataset.src);
    };
    /**
     * @return {?}
     */
    LazyLoadDirective.prototype.isLazyLoadSupported = /**
     * @return {?}
     */
    function () {
        return window && 'IntersectionObserver' in window;
    };
    /**
     * @return {?}
     */
    LazyLoadDirective.prototype.isNativeLazyLoadSupported = /**
     * @return {?}
     */
    function () {
        return 'loading' in HTMLImageElement.prototype; // check loading property is defined on image or iframe
    };
    /**
     * @return {?}
     */
    LazyLoadDirective.prototype.lazyLoad = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var options = {
            rootMargin: "0px 0px -50% 0px",
        };
        /** @type {?} */
        var observer = new IntersectionObserver(function (entries) {
            entries.forEach(function (entry) {
                if (entry.isIntersecting) {
                    _this.loadImage();
                    observer.unobserve(entry.target);
                }
            }, options);
        });
        observer.observe(this.el.nativeElement);
    };
    /** @nocollapse */
    LazyLoadDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
LazyLoadDirective.ɵfac = function LazyLoadDirective_Factory(t) { return new (t || LazyLoadDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
LazyLoadDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: LazyLoadDirective, selectors: [["cl-image", "loading", "lazy"]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LazyLoadDirective, [{
        type: Directive,
        args: [{
                selector: 'cl-image[loading=lazy]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();
    return LazyLoadDirective;
}());
export { LazyLoadDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    LazyLoadDirective.prototype.el;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xvdWRpbmFyeS1sYXp5LWxvYWQuZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyJAY2xvdWRpbmFyeS9hbmd1bGFyLTUueC9saWIvY2xvdWRpbmFyeS1sYXp5LWxvYWQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQWdCLFNBQVMsRUFBRSxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDbkUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHNCQUFzQixDQUFDOztBQUVqRDtBQUdDLElBRUMsMkJBQW9CLEVBQWM7QUFDcEMsUUFEc0IsT0FBRSxHQUFGLEVBQUUsQ0FBWTtBQUFFLElBQUMsQ0FBQztBQUV4QztBQUFTO0FBQ0Y7QUFBUyxJQURkLDJDQUFlO0FBQ2Q7QUFDSDtBQUFTLElBRlA7QUFBZSxRQUNiLElBQUksU0FBUyxFQUFFLEVBQUU7QUFDcEIsWUFBSyxJQUFJLENBQUMsSUFBSSxDQUFDLHlCQUF5QixFQUFFLElBQUksSUFBSSxDQUFDLG1CQUFtQixFQUFFLEVBQUU7QUFDMUUsZ0JBQU8sSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQ3ZCLGFBQU07QUFBRSxpQkFBSTtBQUNaLGdCQUFPLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztBQUN4QixhQUFNO0FBQ04sU0FBSTtBQUNKLElBQUMsQ0FBQztBQUVGO0FBQVM7QUFDSTtBQUFTLElBRHJCLHFDQUFTO0FBQ1I7QUFBb0I7QUFBUyxJQUQ5QjtBQUNEO0FBQTBCLFlBQWpCLGFBQWEsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWE7QUFDOUM7QUFBMEIsWUFBakIsS0FBSyxHQUFHLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0FBQzFDLFFBQUcsS0FBSyxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNoRCxJQUFDLENBQUM7QUFFRjtBQUFTO0FBQ047QUFBUyxJQURYLCtDQUFtQjtBQUNsQjtBQUFvQjtBQUFTLElBRDlCO0FBQWUsUUFDYixPQUFPLE1BQU0sSUFBSSxzQkFBc0IsSUFBSSxNQUFNLENBQUM7QUFDckQsSUFBQyxDQUFDO0FBRUY7QUFBUztBQUFvQjtBQUN2QixJQURMLHFEQUF5QjtBQUN4QjtBQUFvQjtBQUFTLElBRDlCO0FBQWUsUUFDYixPQUFPLFNBQVMsSUFBSSxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsQ0FBQyx1REFBdUQ7QUFDMUcsSUFBQyxDQUFDO0FBRUY7QUFBUztBQUNLO0FBQ2IsSUFGQSxvQ0FBUTtBQUNQO0FBQ0Y7QUFBUyxJQUZSO0FBQ0EsUUFEQSxpQkFjQztBQUNGO0FBQ3dCLFlBZmYsT0FBTyxHQUFHO0FBQ25CLFlBQUssVUFBVSxFQUFFLGtCQUFrQjtBQUFHLFNBQ2xDO0FBQ0o7QUFBMEIsWUFBakIsUUFBUSxHQUFHLElBQUksb0JBQW9CLENBQ3pDLFVBQUMsT0FBTztBQUFLLFlBQ1gsT0FBTyxDQUFDLE9BQU8sQ0FBQyxVQUFBLEtBQUs7QUFBSyxnQkFDdEIsSUFBSSxLQUFLLENBQUMsY0FBYyxFQUFFO0FBQ25DLG9CQUFXLEtBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztBQUM1QixvQkFBVyxRQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUM1QyxpQkFBVTtBQUNWLFlBQU8sQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ25CLFFBQUssQ0FBQyxDQUFDO0FBQ1AsUUFBRyxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDM0MsSUFBQyxDQUFDLENBMUNPO0FBQUU7OEJBSFgsU0FBUyxTQUFDLGhEQUd5QjtRQUZsQyxRQUFRLEVBQUUsbEJBSTRCLGdCQVJOLFVBQVU7QUFBSTtFQUlaLG1CQUNuQzs7Ozs7OzsyRUFMd0Q7QUFBRSxJQWlEM0Qsd0JBQUM7QUFDQyxDQURELEFBOUNELElBOENDO0FBQ0EsU0E1Q1ksaUJBQWlCO0FBQUs7QUFBYztBQUNqRDtBQUNpQjtBQUFpQjtBQUVqQyxJQUZhLCtCQUFzQjs7QUFSQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUtBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQWNBLEFBYkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBN0NBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFMQSxBQUFBLEFBaURBLEFBQUEsQUFBQSxBQTlDQSxBQThDQSxBQTNDQSxBQUFBLEFBRUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QWZ0ZXJWaWV3SW5pdCwgRGlyZWN0aXZlLCBFbGVtZW50UmVmfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGlzQnJvd3NlciB9IGZyb20gJy4vY2xvdWRpbmFyeS5zZXJ2aWNlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnY2wtaW1hZ2VbbG9hZGluZz1sYXp5XSdcbn0pXG5leHBvcnQgY2xhc3MgTGF6eUxvYWREaXJlY3RpdmUgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBFbGVtZW50UmVmKSB7fVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICBpZiAoaXNCcm93c2VyKCkpIHtcbiAgICAgIGlmICghdGhpcy5pc05hdGl2ZUxhenlMb2FkU3VwcG9ydGVkKCkgJiYgdGhpcy5pc0xhenlMb2FkU3VwcG9ydGVkKCkpIHtcbiAgICAgICAgdGhpcy5sYXp5TG9hZCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5sb2FkSW1hZ2UoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBsb2FkSW1hZ2UoKSB7XG4gICAgY29uc3QgbmF0aXZlRWxlbWVudCA9IHRoaXMuZWwubmF0aXZlRWxlbWVudDtcbiAgICBjb25zdCBpbWFnZSA9IG5hdGl2ZUVsZW1lbnQuY2hpbGRyZW5bMF07XG4gICAgaW1hZ2Uuc2V0QXR0cmlidXRlKCdzcmMnLCBpbWFnZS5kYXRhc2V0LnNyYyk7XG4gIH1cblxuICBpc0xhenlMb2FkU3VwcG9ydGVkKCkge1xuICAgIHJldHVybiB3aW5kb3cgJiYgJ0ludGVyc2VjdGlvbk9ic2VydmVyJyBpbiB3aW5kb3c7XG4gIH1cblxuICBpc05hdGl2ZUxhenlMb2FkU3VwcG9ydGVkKCkge1xuICAgIHJldHVybiAnbG9hZGluZycgaW4gSFRNTEltYWdlRWxlbWVudC5wcm90b3R5cGU7IC8vIGNoZWNrIGxvYWRpbmcgcHJvcGVydHkgaXMgZGVmaW5lZCBvbiBpbWFnZSBvciBpZnJhbWVcbiAgfVxuXG4gIGxhenlMb2FkKCkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICByb290TWFyZ2luOiBgMHB4IDBweCAtNTAlIDBweGAsIC8vIE1hcmdpbiBhcm91bmQgdGhlIHJvb3RcbiAgICB9O1xuICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKFxuICAgIChlbnRyaWVzKSA9PiB7XG4gICAgICBlbnRyaWVzLmZvckVhY2goZW50cnkgPT4ge1xuICAgICAgICAgIGlmIChlbnRyeS5pc0ludGVyc2VjdGluZykge1xuICAgICAgICAgICAgdGhpcy5sb2FkSW1hZ2UoKTtcbiAgICAgICAgICAgIG9ic2VydmVyLnVub2JzZXJ2ZShlbnRyeS50YXJnZXQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgb3B0aW9ucyk7XG4gICAgICB9KTtcbiAgICBvYnNlcnZlci5vYnNlcnZlKHRoaXMuZWwubmF0aXZlRWxlbWVudCk7XG4gIH1cbn1cbiJdfQ==