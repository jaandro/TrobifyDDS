/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, HostBinding, Input, ElementRef, Renderer2, } from '@angular/core';
import { Cloudinary } from './cloudinary.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './cloudinary.service';
var CloudinaryPlaceHolder = /** @class */ (function () {
    function CloudinaryPlaceHolder(cloudinary, renderer, el) {
        this.cloudinary = cloudinary;
        this.renderer = renderer;
        this.el = el;
        this.options = {};
    }
    /**
     * @param {?} width
     * @return {?}
     */
    CloudinaryPlaceHolder.prototype.setWidth = /**
     * @param {?} width
     * @return {?}
     */
    function (width) {
        this.itemWidth = width;
    };
    /**
     * @param {?} height
     * @return {?}
     */
    CloudinaryPlaceHolder.prototype.setHeight = /**
     * @param {?} height
     * @return {?}
     */
    function (height) {
        this.itemHeight = height;
    };
    /**
     * @param {?} id
     * @return {?}
     */
    CloudinaryPlaceHolder.prototype.setPublicId = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        this.publicId = id;
    };
    /**
     * @return {?}
     */
    CloudinaryPlaceHolder.prototype.ngAfterContentChecked = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var imageTag = this.cloudinary.imageTag(this.publicId, this.options);
        this.setElementAttributes(this.el.nativeElement.children[0], imageTag.attributes());
        this.placeholderImg = this.getPlaceholderImage();
    };
    /**
     * @return {?}
     */
    CloudinaryPlaceHolder.prototype.getPlaceholderImage = /**
     * @return {?}
     */
    function () {
        if (this.type === 'predominant-color' && this.itemHeight && this.itemWidth) {
            return this.cloudinary.url(this.publicId, tslib_1.__assign({ placeholder: 'predominant-color-pixel' || true }, this.options));
        }
        else {
            return this.cloudinary.url(this.publicId, tslib_1.__assign({ placeholder: this.type || true }, this.options));
        }
    };
    /**
     * @param {?} element
     * @param {?} attributesLiteral
     * @return {?}
     */
    CloudinaryPlaceHolder.prototype.setElementAttributes = /**
     * @param {?} element
     * @param {?} attributesLiteral
     * @return {?}
     */
    function (element, attributesLiteral) {
        var _this = this;
        Object.keys(attributesLiteral).forEach(function (attrName) {
            if (attrName !== 'src' && attrName !== 'style') {
                _this.renderer.setAttribute(element, attrName, attributesLiteral[attrName]);
            }
        });
    };
    /** @nocollapse */
    CloudinaryPlaceHolder.ctorParameters = function () { return [
        { type: Cloudinary },
        { type: Renderer2 },
        { type: ElementRef }
    ]; };
    CloudinaryPlaceHolder.propDecorators = {
        type: [{ type: Input, args: ['type',] }],
        itemWidth: [{ type: HostBinding, args: ['style.width',] }],
        itemHeight: [{ type: HostBinding, args: ['style.height',] }],
        publicId: [{ type: HostBinding, args: ['attr.public-id',] }]
    };
CloudinaryPlaceHolder.ɵfac = function CloudinaryPlaceHolder_Factory(t) { return new (t || CloudinaryPlaceHolder)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Cloudinary), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
CloudinaryPlaceHolder.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CloudinaryPlaceHolder, selectors: [["cl-placeholder"]], hostVars: 5, hostBindings: function CloudinaryPlaceHolder_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("public-id", ctx.publicId);
        ɵngcc0.ɵɵstyleProp("width", ctx.itemWidth)("height", ctx.itemHeight);
    } }, inputs: { type: "type" }, decls: 1, vars: 1, consts: [[3, "src"]], template: function CloudinaryPlaceHolder_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "img", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("src", ctx.placeholderImg, ɵngcc0.ɵɵsanitizeUrl);
    } }, encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CloudinaryPlaceHolder, [{
        type: Component,
        args: [{
                selector: 'cl-placeholder',
                template: "<img [src]=\"this.placeholderImg\">"
            }]
    }], function () { return [{ type: ɵngcc1.Cloudinary }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }]; }, { itemWidth: [{
            type: HostBinding,
            args: ['style.width']
        }], itemHeight: [{
            type: HostBinding,
            args: ['style.height']
        }], publicId: [{
            type: HostBinding,
            args: ['attr.public-id']
        }], type: [{
            type: Input,
            args: ['type']
        }] }); })();
    return CloudinaryPlaceHolder;
}());
export { CloudinaryPlaceHolder };
if (false) {
    /** @type {?} */
    CloudinaryPlaceHolder.prototype.type;
    /** @type {?} */
    CloudinaryPlaceHolder.prototype.itemWidth;
    /** @type {?} */
    CloudinaryPlaceHolder.prototype.itemHeight;
    /** @type {?} */
    CloudinaryPlaceHolder.prototype.publicId;
    /** @type {?} */
    CloudinaryPlaceHolder.prototype.options;
    /** @type {?} */
    CloudinaryPlaceHolder.prototype.placeholderImg;
    /**
     * @type {?}
     * @private
     */
    CloudinaryPlaceHolder.prototype.cloudinary;
    /**
     * @type {?}
     * @private
     */
    CloudinaryPlaceHolder.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    CloudinaryPlaceHolder.prototype.el;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,