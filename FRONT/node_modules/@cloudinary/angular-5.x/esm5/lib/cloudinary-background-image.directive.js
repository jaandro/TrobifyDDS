/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Renderer2, Input, QueryList, ContentChildren } from '@angular/core';
import { Cloudinary } from './cloudinary.service';
import { CloudinaryTransformationDirective } from './cloudinary-transformation.directive';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './cloudinary.service';
var CloudinaryBackgroundImageDirective = /** @class */ (function () {
    function CloudinaryBackgroundImageDirective(renderer, el, cloudinary) {
        this.renderer = renderer;
        this.el = el;
        this.cloudinary = cloudinary;
    }
    /**
     * @return {?}
     */
    CloudinaryBackgroundImageDirective.prototype.isBrowser = /**
     * @return {?}
     */
    function () {
        return typeof window !== 'undefined';
    };
    /**
     * @return {?}
     */
    CloudinaryBackgroundImageDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (this.isBrowser()) {
            /** @type {?} */
            var nativeElement = this.el.nativeElement;
            /** @type {?} */
            var options = this.cloudinary.toCloudinaryAttributes(nativeElement.attributes, this.transformations);
            /** @type {?} */
            var imageUrl = this.cloudinary.url(this.clBackgroundImage, options);
            this.renderer.setStyle(nativeElement, 'background-image', "url('" + imageUrl + "')");
            this.renderer.setStyle(nativeElement, 'background-repeat', 'no-repeat');
            this.renderer.setStyle(nativeElement, 'background-position', 'center');
        }
    };
    /** @nocollapse */
    CloudinaryBackgroundImageDirective.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: Cloudinary }
    ]; };
    CloudinaryBackgroundImageDirective.propDecorators = {
        clBackgroundImage: [{ type: Input }],
        transformations: [{ type: ContentChildren, args: [CloudinaryTransformationDirective,] }]
    };
CloudinaryBackgroundImageDirective.ɵfac = function CloudinaryBackgroundImageDirective_Factory(t) { return new (t || CloudinaryBackgroundImageDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Cloudinary)); };
CloudinaryBackgroundImageDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CloudinaryBackgroundImageDirective, selectors: [["", "clBackgroundImage", ""]], contentQueries: function CloudinaryBackgroundImageDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, CloudinaryTransformationDirective, 0);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.transformations = _t);
    } }, inputs: { clBackgroundImage: "clBackgroundImage" } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CloudinaryBackgroundImageDirective, [{
        type: Directive,
        args: [{
                selector: '[clBackgroundImage]'
            }]
    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.Cloudinary }]; }, { clBackgroundImage: [{
            type: Input
        }], transformations: [{
            type: ContentChildren,
            args: [CloudinaryTransformationDirective]
        }] }); })();
    return CloudinaryBackgroundImageDirective;
}());
export { CloudinaryBackgroundImageDirective };
if (false) {
    /** @type {?} */
    CloudinaryBackgroundImageDirective.prototype.clBackgroundImage;
    /** @type {?} */
    CloudinaryBackgroundImageDirective.prototype.transformations;
    /**
     * @type {?}
     * @private
     */
    CloudinaryBackgroundImageDirective.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    CloudinaryBackgroundImageDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    CloudinaryBackgroundImageDirective.prototype.cloudinary;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xvdWRpbmFyeS1iYWNrZ3JvdW5kLWltYWdlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsiQGNsb3VkaW5hcnkvYW5ndWxhci01LngvbGliL2Nsb3VkaW5hcnktYmFja2dyb3VuZC1pbWFnZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBaUIsS0FBSyxFQUFFLFNBQVMsRUFBRSxlQUFlLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDakgsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBQ2hELE9BQU8sRUFBQyxpQ0FBaUMsRUFBQyxNQUFNLHVDQUF1QyxDQUFDOzs7QUFFeEY7QUFHbUIsSUFPZiw0Q0FBb0IsUUFBbUIsRUFBVSxFQUFjLEVBQVUsVUFBc0I7QUFDbEcsUUFEdUIsYUFBUSxHQUFSLFFBQVEsQ0FBVztBQUFFLFFBQVEsT0FBRSxHQUFGLEVBQUUsQ0FBWTtBQUFFLFFBQVEsZUFBVSxHQUFWLFVBQVUsQ0FBWTtBQUFFLElBQ2pHLENBQUM7QUFFTDtBQUFTO0FBQ1A7QUFBUyxJQURQLHNEQUFTO0FBQVE7QUFDUDtBQUFTLElBRG5CO0FBQWUsUUFDYixPQUFPLE9BQU8sTUFBTSxLQUFLLFdBQVcsQ0FBQztBQUMxQyxJQUFHLENBQUM7QUFFSjtBQUFTO0FBQ0o7QUFBUyxJQURYLDREQUFlO0FBQ2hCO0FBQW9CO0FBQ3JCLElBRkU7QUFBZSxRQUNiLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRSxFQUFFO0FBQzNCO0FBQThCLGdCQUFqQixhQUFhLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhO0FBQ2xEO0FBQThCLGdCQUFqQixPQUFPLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxzQkFBc0IsQ0FBQyxhQUFhLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxlQUFlLENBQUM7QUFDN0c7QUFBOEIsZ0JBQWpCLFFBQVEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsT0FBTyxDQUFDO0FBQzVFLFlBQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsYUFBYSxFQUFFLGtCQUFrQixFQUFFLFVBQVEsUUFBUSxPQUFJLENBQUMsQ0FBQztBQUN2RixZQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLGFBQWEsRUFBRSxtQkFBbUIsRUFBRSxXQUFXLENBQUMsQ0FBQztBQUMvRSxZQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLGFBQWEsRUFBRSxxQkFBcUIsRUFBRSxRQUFRLENBQUMsQ0FBQztBQUM5RSxTQUFNO0FBQ04sSUFBQyxDQUFDLENBdkJPO0FBQUU7K0NBSFgsU0FBUyxTQUFDLGpFQUd5QjtRQUZoQyxRQUFRLEVBQUUsbEJBS2QsZ0JBVitCLFNBQVM7U0FLTCxtQkFDbEMsNUJBTjRDLGdCQUExQixVQUFVO0FBQUssZ0JBQzFCLFVBQVU7QUFBSTtBQUFXO0FBQ1Usb0NBT3RDLEtBQUs7QUFBTSxrQ0FFWCxlQUFlLFNBQUMsaUNBQWlDO0FBQ2pEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQU07QUFBRSxJQW1CYix5Q0FBQztBQUNDLENBREQsQUEzQkQsSUEyQkM7QUFDQSxTQXpCWSxrQ0FBa0M7QUFBSztBQUFjO0FBRXRELElBQVIsK0RBQW1DO0FBRXZDO0FBQXNCLElBQWxCLDZEQUM4RDtBQUVsRTtBQUFTO0FBQWtCO0FBQWlCO0FBQVMsSUFBckMsc0RBQTJCO0FBQUU7QUFBUztBQUFrQjtBQUFpQjtBQUFTLElBQXJELGdEQUFzQjtBQUFFO0FBQVM7QUFBa0I7QUFHN0Y7QUFBUyxJQUh5RCx3REFBOEI7O0FBZEEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQVVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBMUJBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFOQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFRQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFvQkEsQUFBQSxBQUFBLEFBM0JBLEFBMkJBLEFBeEJBLEFBQUEsQUFFQSxBQUFBLEFBRUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBFbGVtZW50UmVmLCBSZW5kZXJlcjIsIEFmdGVyVmlld0luaXQsIElucHV0LCBRdWVyeUxpc3QsIENvbnRlbnRDaGlsZHJlbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0Nsb3VkaW5hcnl9IGZyb20gJy4vY2xvdWRpbmFyeS5zZXJ2aWNlJztcbmltcG9ydCB7Q2xvdWRpbmFyeVRyYW5zZm9ybWF0aW9uRGlyZWN0aXZlfSBmcm9tICcuL2Nsb3VkaW5hcnktdHJhbnNmb3JtYXRpb24uZGlyZWN0aXZlJztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbY2xCYWNrZ3JvdW5kSW1hZ2VdJ1xufSlcbmV4cG9ydCBjbGFzcyBDbG91ZGluYXJ5QmFja2dyb3VuZEltYWdlRGlyZWN0aXZlIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XG5cbiAgICBASW5wdXQoKSBjbEJhY2tncm91bmRJbWFnZTogc3RyaW5nO1xuXG4gICAgQENvbnRlbnRDaGlsZHJlbihDbG91ZGluYXJ5VHJhbnNmb3JtYXRpb25EaXJlY3RpdmUpXG4gICAgdHJhbnNmb3JtYXRpb25zOiBRdWVyeUxpc3Q8Q2xvdWRpbmFyeVRyYW5zZm9ybWF0aW9uRGlyZWN0aXZlPjtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMiwgcHJpdmF0ZSBlbDogRWxlbWVudFJlZiwgcHJpdmF0ZSBjbG91ZGluYXJ5OiBDbG91ZGluYXJ5KSB7XG4gICAgfVxuXG4gICAgaXNCcm93c2VyKCk6IGJvb2xlYW4ge1xuICAgICAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xuICAgIH1cblxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICAgIGlmICh0aGlzLmlzQnJvd3NlcigpKSB7XG4gICAgICAgIGNvbnN0IG5hdGl2ZUVsZW1lbnQgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQ7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLmNsb3VkaW5hcnkudG9DbG91ZGluYXJ5QXR0cmlidXRlcyhuYXRpdmVFbGVtZW50LmF0dHJpYnV0ZXMsIHRoaXMudHJhbnNmb3JtYXRpb25zKTtcbiAgICAgICAgY29uc3QgaW1hZ2VVcmwgPSB0aGlzLmNsb3VkaW5hcnkudXJsKHRoaXMuY2xCYWNrZ3JvdW5kSW1hZ2UsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKG5hdGl2ZUVsZW1lbnQsICdiYWNrZ3JvdW5kLWltYWdlJywgYHVybCgnJHtpbWFnZVVybH0nKWApO1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKG5hdGl2ZUVsZW1lbnQsICdiYWNrZ3JvdW5kLXJlcGVhdCcsICduby1yZXBlYXQnKTtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZShuYXRpdmVFbGVtZW50LCAnYmFja2dyb3VuZC1wb3NpdGlvbicsICdjZW50ZXInKTtcbiAgICAgIH1cbiAgfVxufVxuIl19